diff --git a/dist/cli.js b/dist/cli.js
index eb2879e54b235bf1a15d37294c9d54bafa9bd44d..2936dec33cb1188aef216640b1f279c0c26c1667 100755
--- a/dist/cli.js
+++ b/dist/cli.js
@@ -905,6 +905,15 @@ function createConfig(options, entry, format, writeMeta) {
 
   const modern = format === 'modern'; // let rollupName = safeVariableName(basename(entry).replace(/\.js$/, ''));
 
+  let amd = {};
+  if (options['amd-name']) {
+  	amd.id = options['amd-name'];
+  }
+
+  if (options['amd-define']) {
+  	amd.define = options['amd-define'];
+  }
+
   let nameCache = {};
   const bareNameCache = nameCache; // Support "minify" field and legacy "mangle" field via package.json:
 
@@ -1155,6 +1164,7 @@ function createConfig(options, entry, format, writeMeta) {
       freeze: false,
       esModule: false,
       sourcemap: options.sourcemap,
+      amd,
 
       get banner() {
         return shebang[options.name];
@@ -1199,7 +1209,7 @@ var prog = (handler => {
   };
 
   let prog = sade__default['default']('microbundle');
-  prog.version(version).option('--entry, -i', 'Entry module(s)').option('--output, -o', 'Directory to place build files into').option('--format, -f', `Only build specified formats (any of ${DEFAULT_FORMATS} or iife)`, DEFAULT_FORMATS).option('--watch, -w', 'Rebuilds on any change', false).option('--pkg-main', 'Outputs files analog to package.json main entries', true).option('--target', 'Specify your target environment (node or web)', 'web').option('--external', `Specify external dependencies, or 'none'`).option('--globals', `Specify globals dependencies, or 'none'`).example('--globals react=React,jquery=$').option('--define', 'Replace constants with hard-coded values').example('--define API_KEY=1234').option('--alias', `Map imports to different modules`).example('--alias react=preact').option('--compress', 'Compress output using Terser (default true when --target is web, false when --target is node)').example('build --target web --no-compress').option('--strict', 'Enforce undefined global context and add "use strict"').option('--name', 'Specify name exposed in UMD builds').option('--cwd', 'Use an alternative working directory', '.').option('--sourcemap', 'Generate source map').example("watch --no-sourcemap # don't generate sourcemaps").option('--raw', 'Show raw byte size', false).option('--jsx', 'A custom JSX pragma like React.createElement', 'h').option('--jsxFragment', 'A custom JSX fragment pragma like React.Fragment', 'Fragment').option('--jsxImportSource', 'Declares the module specifier to be used for importing jsx factory functions').option('--tsconfig', 'Specify the path to a custom tsconfig.json').example('build --tsconfig tsconfig.build.json').option('--generateTypes', 'Whether or not to generate types , if `types` or `typings` is set in `package.json` then it will default to be `true`').option('--css', 'Where to output CSS: "inline" or "external"', 'external').option('--css-modules', 'Turns on css-modules for all .css imports. Passing a string will override the scopeName. eg --css-modules="_[hash]"', null).option('--workers', 'Bundle module workers - see https://github.com/surma/rollup-plugin-off-main-thread#auto-bundling', false).option('--visualize', 'Generate bundle makeup visualization (stats.html)', false);
+  prog.version(version).option('--entry, -i', 'Entry module(s)').option('--output, -o', 'Directory to place build files into').option('--format, -f', `Only build specified formats (any of ${DEFAULT_FORMATS} or iife)`, DEFAULT_FORMATS).option('--watch, -w', 'Rebuilds on any change', false).option('--pkg-main', 'Outputs files analog to package.json main entries', true).option('--target', 'Specify your target environment (node or web)', 'web').option('--external', `Specify external dependencies, or 'none'`).option('--globals', `Specify globals dependencies, or 'none'`).example('--globals react=React,jquery=$').option('--define', 'Replace constants with hard-coded values').example('--define API_KEY=1234').option('--alias', `Map imports to different modules`).example('--alias react=preact').option('--compress', 'Compress output using Terser (default true when --target is web, false when --target is node)').example('build --target web --no-compress').option('--strict', 'Enforce undefined global context and add "use strict"').option('--name', 'Specify name exposed in UMD builds').option('--amd-name', '[amd] use named define("name", ...)').option('--amd-define', '[amd] function to use in place of define()').option('--cwd', 'Use an alternative working directory', '.').option('--sourcemap', 'Generate source map').example("watch --no-sourcemap # don't generate sourcemaps").option('--raw', 'Show raw byte size', false).option('--jsx', 'A custom JSX pragma like React.createElement', 'h').option('--jsxFragment', 'A custom JSX fragment pragma like React.Fragment', 'Fragment').option('--jsxImportSource', 'Declares the module specifier to be used for importing jsx factory functions').option('--tsconfig', 'Specify the path to a custom tsconfig.json').example('build --tsconfig tsconfig.build.json').option('--generateTypes', 'Whether or not to generate types , if `types` or `typings` is set in `package.json` then it will default to be `true`').option('--css', 'Where to output CSS: "inline" or "external"', 'external').option('--css-modules', 'Turns on css-modules for all .css imports. Passing a string will override the scopeName. eg --css-modules="_[hash]"', null).option('--workers', 'Bundle module workers - see https://github.com/surma/rollup-plugin-off-main-thread#auto-bundling', false).option('--visualize', 'Generate bundle makeup visualization (stats.html)', false);
   prog.command('build [...entries]', '', {
     default: true
   }).describe('Build once and exit').action(cmd('build'));